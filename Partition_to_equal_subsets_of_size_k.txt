class Solution {
public:
    int taken[17];
    bool canPartitionKSubsets(vector<int>& nums, int k) 
    {
        
        memset(taken, 0, sizeof(taken));
        int n = nums.size();
        int sum = 0;
        for(int i = 0; i < n; i++)
          sum += nums[i];
        if(k == 0 || sum % k != 0)
            return false;
        return solve(0, 0, nums, k, sum/k, n);
      
    }
   bool solve(int idx, int curr_sum, vector<int>& nums, int k, int sum, int n)
   {
        if(k == 1)
            return true;
        if(curr_sum > sum)
            return false;
        if(curr_sum == sum)
            // return true;
             return solve(0, 0, nums, k - 1, sum, n);
        for(int i = idx; i < n; i++)
        {
            if(!taken[i])
            {
                taken[i] = true;
                if(solve(idx + 1, curr_sum + nums[i], nums, k, sum, n))
                    return true;
                taken[i] = false;
            }
        }
        return false;
    }

};