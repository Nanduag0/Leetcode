class LRUCache {
public:
   
     class node 
  {
       public:
      int key;
      int val;
      node* next;
      node* prev;
      node(int _key,int _val)
      {
          key=_key;
          val=_val;
      }
  };
    node* head=new node(-1,-1);
    node* tail=new node(-1,-1);
    int cap;
    unordered_map<int,node*> mp;
    LRUCache(int capacity)
    {
        cap=capacity;
        head->next=tail;
        tail->prev=head;
    }
    void addnode(node *newnode)
    {
        //take a temporary variable and then assign it to head->next
        //and accordingly make the changes
        node* temp=head->next;
        newnode->next=temp;
        newnode->prev=head;
        head->next=newnode;
        temp->prev=newnode;
    }
    void deletenode(node * delnode)
    {
        //take a deprev node and then assign it previous of the node to be deleted 
        node* deprev=delnode->prev;
        node* delnext=delnode->next;
        deprev->next=delnext;
        delnext->prev=deprev;
    }
    int get(int key) 
    {
        //if the key is found then take the value of address of the
        //from the map and delete the node and place it just after the head and update the address of its in the map 
       if(mp.find(key)!=mp.end()) 
       {
           node* resnode=mp[key];
           int res=resnode->val;
           mp.erase(key);
           deletenode(resnode);
           addnode(resnode);
           mp[key]=head->next;
           return res;
       }
           return -1;
    }
    
    void put(int key, int value) 
    {
        //for the first time when asked to put then if found take it 
        //value from the map then delete the node and add it to the next of head 
        //if the size of map is capacity mp  erase the node to the left of tail and then add the node
        
      if(mp.find(key)!=mp.end())
      {
          node* existnode=mp[key];
          mp.erase(key);
          deletenode(existnode);
      }
        if(mp.size()==cap)
        {
            mp.erase(tail->prev->key);
            deletenode(tail->prev);
        }
        addnode(new node(key,value));
        mp[key]=head->next;
        
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */