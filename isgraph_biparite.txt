class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) 
    {
        vector<int> edges[graph.size()];
        for(int i=0;i<graph.size();i++)
        {
            for(int k=0;k<graph[i].size();k++)
            {
                edges[i].push_back(graph[i][k]);
            }
        }
        vector<int> colour(graph.size(),-1);
        vector<bool> visited(graph.size(),false);
        int n=graph.size();
        for(int i=0;i<n;i++)
        {
            if(colour[i]==-1)
            {
                if(!(dfs(visited,colour,i,-1,edges)))
                {
                    return false;
                }
            }
        }
        return true;
    }
    bool dfs(vector<bool> &visited,vector<int> &colour,int node,int parent,vector<int> edges[])
    {
        if(colour[node]==-1)colour[node]=0;
        for(auto it : edges[node])
        {
            if(colour[it]==-1)
            {
                colour[it]=1-colour[node];
                if(!(dfs(visited,colour,it,node,edges)))
                    return false;
            }
            else
                if(colour[it]==colour[node])
                    return false;
        }
        return true;
        
    }
};