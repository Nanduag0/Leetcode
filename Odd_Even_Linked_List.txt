/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) 
    {
        ListNode* temp=head;
        ListNode* pre=NULL,*erp=NULL,*head1=NULL,*head2=NULL;
        int i=1;
         while(temp!=NULL)
         {
             // cout<<temp->val<<"\n";
           if(i%2==0)
                {
                    // cout<<"&"<<"\n";
                    if(pre==NULL)
                    {
                        //cout<<"***";
                         head1=temp;
                        pre=temp;
                       
                    }
                    else
                    {
                        pre->next=temp;
                        pre=pre->next;
                    }
                }
             else
                if(i%2!=0)
                {
                    // cout<<"**"<<"\n";
                    if(erp==NULL)
                    {
                        head2=temp;
                        erp=temp; ;
                    }
                    else
                    {
                        erp->next=temp;
                        erp=erp->next;
                    }
                }
            i++;
            temp=temp->next;
           }
      if(!head1)
          return head2;
        else
        if(!head2)
        return head1;
        else
        if(head2)
        {
          erp->next=head1;
          pre->next=NULL;
        }
      return head2;
        
    }
};