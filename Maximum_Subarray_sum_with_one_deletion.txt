class Solution {
public:
    int maximumSum(vector<int>& arr) 
    {
        vector<int> vec(arr.size());
        vector<int> back(arr.size());
        if(arr.size()==1)
            return arr[0];
        int  curr=0,maxim=INT_MIN;
        vec[0]=arr[0];
        for(int i=0;i<arr.size();i++)
        {
            curr=max(arr[i],curr+arr[i]);
            maxim=max(maxim,curr);
        }
         int ult=maxim;
        for(int i=1;i<arr.size();i++)
        {
          vec[i]=max(arr[i],arr[i]+vec[i-1]);
        }
       
        int n=arr.size();
        curr=INT_MIN;
        maxim=INT_MIN;
        back[n-1]=arr[n-1];
       for(int i=n-2;i>=0;i--)
       {
           back[i]=max(arr[i]+back[i+1],arr[i]);
       }
        int i=0;
        int ans=INT_MIN,pre=0;
        while(i<arr.size())
        {
            maxim=INT_MIN;
            if(arr[i]<0)
            {
                maxim=i<=n-2?(back[i+1]):0;
                //cout<<maxim<<" ";
                pre=i>0?vec[i-1]:0;
               // cout<<pre<<" ";
                ans=max(ans,(maxim+pre));
            }
            i++;
        }
        cout<<ans;
        
        if(ans<ult)
            return ult;
        return ans;
        
    }
};