class Solution 
{
    public:
    //Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{
	    vector<vector<int>> arr(N,vector<int>(N,0));
	    int a =KnightPos[0];
	    int b=KnightPos[1];
	    int c=TargetPos[0];
	    int d=TargetPos[1];
	    queue<pair<int,int>> que;
	    que.push({a-1,b-1});
	    while(!que.empty())
	    {
	        pair<int,int> p=que.front();
	        int i=p.first;
	        int j=p.second;
	        que.pop();
	        if(i+1>=0 && i+1<N && j+2>=0 && j+2<N  && arr[i+1][j+2]==0)
	        {
	            arr[i+1][j+2]=arr[i][j]+1;
	            que.push({i+1,j+2});
	        }
	        if(i-1>=0 && i-1<N && j+2>=0 && j+2<N && arr[i-1][j+2]==0)
	        {
	            arr[i-1][j+2]=arr[i][j]+1;
	            que.push({i-1,j+2});
	        }
	           if(i-1>=0 && i-1<N && j-2>=0 && j-2<N && arr[i-1][j-2]==0)
	        {
	            arr[i-1][j-2]=arr[i][j]+1;
	            que.push({i-1,j-2});
	        }
	           if(i+1>=0 && i+1<N && j-2>=0 && j-2<N && arr[i+1][j-2]==0)
	        {
	            arr[i+1][j-2]=arr[i][j]+1;
	            que.push({i+1,j-2});
	        }
	           if(i+2>=0 && i+2<N && j+1>=0 && j+1<N && arr[i+2][j+1]==0)
	        {
	            arr[i+2][j+1]=arr[i][j]+1;
	            que.push({i+2,j+1});
	        }
	           if(i+2>=0 && i+2<N && j-1>=0 && j-1<N && arr[i+2][j-1]==0)
	        {
	            arr[i+2][j-1]=arr[i][j]+1;
	            que.push({i+2,j-1});
	        }
	           if(i-2>=0 && i-2<N && j+1>=0 && j+1<N && arr[i-2][j+1]==0)
	        {
	            arr[i-2][j+1]=arr[i][j]+1;
	            que.push({i-2,j+1});
	        }
	           if(i-2>=0 && i-2<N && j-1>=0 && j-1<N && arr[i-2][j-1]==0)
	        {
	            arr[i-2][j-1]=arr[i][j]+1;
	            que.push({i-2,j-1});
	        }
	        
	    }
	    return arr[c-1][d-1];
	    
	    // Code here
	}
};