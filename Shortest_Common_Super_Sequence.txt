class Solution {
public:
    string shortestCommonSupersequence(string str1, string str2) 
    {
        string s=str1;
        string t=str2;
        int dp[s.length()+1][t.length()+1];
        for(int i=0;i<=s.length();i++)
        {
            for(int j=0;j<=t.length();j++)
            {
                if(i==0 || j==0)
                {
                    dp[i][j]=0;
                }
            }
        }
        for(int i=1;i<=s.length();i++)
        {
            for(int j=1;j<=t.length();j++)
            {
                if(s[i-1]==t[j-1])
                {
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
        }
        int l= dp[s.length()][t.length()];
        string p="";
        int m=s.length(),n=t.length();
        while(m>0 && n>0)
        {
            if(s[m-1]==t[n-1])
            {
                p.push_back(s[m-1]);
                m--;
                n--;
            }
            else
            if(dp[m-1][n]>dp[m][n-1])
            {
                m--;
            }
            else
                n--;
        }
        reverse(p.begin(),p.end());
        string ans="";
        int m1=0,m2=0;
        for(char c : p)
        {
            while(str1[m1]!=c)
            {
                ans+=str1[m1++];
            }
            while(str2[m2]!=c)
            {
                ans+=str2[m2++];
            }
            ans+=c;
            m1++;
            m2++;
        }
        ans+=str1.substr(m1)+str2.substr(m2);
        cout<<p<<" ";
        return ans;
        
    }
};