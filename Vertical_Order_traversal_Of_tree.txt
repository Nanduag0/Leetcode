/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) 
    {
        queue<pair<TreeNode*,int>> que;
        que.push(make_pair(root,0));
        map<int,vector<int>> mp;
        while(!que.empty())
        {
          int n=que.size();
          vector<pair<int,int>> v;
          while(n--)
          {
           pair<TreeNode*,int> p=que.front();
           TreeNode* node=p.first;
           int val=p.second;
           que.pop();
           v.push_back({node->val,val});
           if(node->left!=NULL)
           {
               que.push(make_pair(node->left,val-1));
           }
           if(node->right!=NULL)
           {
               que.push(make_pair(node->right,val+1));
           }   
          }
            sort(v.begin(),v.end());
            for(auto it : v)
            {
                mp[it.second].push_back(it.first);
            }
        }
        vector<vector<int>> vec;
        for(auto it : mp)
        {
            vec.push_back(it.second);
        }
        return vec;
        
    }
};