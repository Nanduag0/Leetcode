class Solution {
public:
    vector<string> findAndReplacePattern(vector<string>& words, string pattern)
    {
        int len=pattern.length();
        vector<string> ans;
         map<char,char> mp;
        for(int i=0;i<words.size();i++)
        {
            string a=words[i];
            int j=0,flag=0;
            while(j<len)
            {
                if(mp.find(pattern[j])!=mp.end())
                {
                    auto it =mp.find(pattern[j]);
                    if(it->second!=a[j])
                    {
                        flag=1;
                        break;
                    }
                }
                else
                {
                    for(auto it : mp)
                    {
                        if(it.second==a[j])
                        {
                            if(it.first!=pattern[j])
                            {
                                flag=1;
                                break;
                            }
                        }
                    }
                }
               if(flag!=1)
               mp[pattern[j]]=a[j];
                j++;
            }
            mp.clear();
            if(flag!=1)
            {
              ans.push_back(a);  
            }
        }
        return ans;
        
    }
};

https://leetcode.com/problems/check-if-word-is-valid-after-substitutions/
https://leetcode.com/problems/longest-string-chain/
https://leetcode.com/problems/minimum-swaps-to-make-strings-equal/
https://leetcode.com/problems/replace-the-substring-for-balanced-string/
https://leetcode.com/problems/number-of-substrings-containing-all-three-characters/
