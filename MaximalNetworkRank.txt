class Solution {
public:
    int maximalNetworkRank(int n, vector<vector<int>>& roads) {
        vector<int> vec(n,0);
        vector<int> adj[n];
        for(int i=0;i<roads.size();i++)
        {
            adj[roads[i][0]].push_back(roads[i][1]);
            adj[roads[i][1]].push_back(roads[i][0]);
            vec[roads[i][0]]++;
            vec[roads[i][1]]++;
        }
        int maxim=0;
        vector<int> v;
        solve(n,maxim,vec,0,v,adj);
        return maxim;
        
    }
    void solve(int n,int &maxim,vector<int> vec,int indx,vector<int> v,vector<int> adj[])
    {
        if(v.size()>2)
            return;
        
        if(v.size()==2)
        {
            // cout<<v[0]<<" "<<v[1]<<" "<<vec[v[0]]+vec[v[1]]-1<<" "<<"\n";
            if(find(adj[v[0]].begin(),adj[v[0]].end(),v[1])==adj[v[0]].end())
            maxim=max(maxim,vec[v[0]]+vec[v[1]]);
            else
            maxim=max(maxim,vec[v[0]]+vec[v[1]]-1);
            return;
        }
        for(int i=indx;i<n;i++)
        {
           v.push_back(i);
           solve(n,maxim,vec,i+1,v,adj);
           v.erase(v.end()-1);
        }
    }
};