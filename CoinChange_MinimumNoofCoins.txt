int coinChange(vector<int>& coins, int amount)
    {
        
        
        //Minimum no of coins
        
        int dp[coins.size()+1][amount+1];
        for(int i=0;i<=amount;i++)
        {
            dp[0][i]=INT_MAX-1;
        }
        for(int i=1;i<=coins.size();i++)
        {
            dp[i][0]=0;
        }
        for(int j=1;j<=amount;j++)
        {
            if(j%coins[0] ==0)
            {
                dp[1][j]=j/coins[0];
            }
            else
                dp[1][j]=INT_MAX-1;
        }
        for(int i=2;i<=coins.size();i++)
        {
            for(int j=1;j<=amount;j++)
            {
                if(coins[i-1]<=j)
                dp[i][j]=min(1+ dp[i][j-coins[i-1]],dp[i-1][j]);//since unbounded knapsack 
                else
                dp[i][j]=dp[i-1][j];
            }
        }
       if(dp[coins.size()][amount]==INT_MAX-1)
       {
           return -1;
       }
        else
        return dp[coins.size()][amount];
        
    }