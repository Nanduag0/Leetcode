class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        
        vector<vector<pair<int,double>>> adj(n);
        for(int i=0;i<edges.size();i++)
        {
            adj[edges[i][0]].push_back(make_pair(edges[i][1],succProb[i]));
            adj[edges[i][1]].push_back(make_pair(edges[i][0],succProb[i]));
        }
        
        priority_queue<pair<int,int>> pq;
        vector<double> distance(n,0.0000);
        distance[start]=1;
        pq.push({1.0,start});
        while(!pq.empty())
        {
            pair<int,int> p=pq.top();
            int sucp=p.first;
            int node=p.second;
            pq.pop();
            for(auto it : adj[node])
            {
             // cout<<it.first<<" "<<it.second<<"\n";
              if((distance[node]*(it.second))> distance[it.first] && it.first!=node)
              {
                  distance[it.first]=distance[node]*(it.second);
                  pq.push({distance[it.first],it.first});
              }
            }
        }
        return distance[end];
    }
};