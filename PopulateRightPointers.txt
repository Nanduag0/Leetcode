/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) 
    {
        if(root==NULL)
            return NULL;
        queue<Node*> que;
        que.push(root);
        que.push(NULL);
        while(!que.empty())
        {
           Node* temp=que.front();
                que.pop();
                if(temp==NULL)
                {
                    if(que.size()==0)
                        break;
                    que.push(NULL);
                    continue;
                }
                temp->next=que.front();
                if(temp->left!=NULL)
                    que.push(temp->left);
                if(temp->right!=NULL)
                    que.push(temp->right);
                
        }
        return root;
        
    }
};