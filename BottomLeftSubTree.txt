/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) 
    {
        if(root==NULL)
            return NULL;
        queue<TreeNode*> que;
        que.push(root);
        que.push(NULL);
        vector<string> vec;
        while(!que.empty())
        {
           TreeNode* temp=que.front();
            if(temp==NULL)
                vec.push_back("#");
            else
            vec.push_back(to_string(temp->val));
            que.pop();
                if(temp==NULL)
                {
                    if(que.size()==0)
                        break;
                    que.push(NULL);
                    continue;
                }
                if(temp->left!=NULL)
                    que.push(temp->left);
                if(temp->right!=NULL)
                    que.push(temp->right);
                
        }
        int count=0;
        string ans="";
        for(int i=vec.size()-1;i>=0;i--)
        {
            if(vec[i]=="#")
            {
                count++;
            }
               if(count==2)
               {
                   ans=vec[i+1];
                   break;
               }
                
        }
        if(count==1)
        {
            ans=vec[0];
        }
        int y=0;
        return stoi(ans);
    }
};