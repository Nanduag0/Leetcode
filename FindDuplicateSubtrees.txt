/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
public:
//string solve(TreeNode *root);
unordered_map<string,int> mp;
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) 
    {
    vector<TreeNode*> vec;
    queue<TreeNode*> que;
    que.push(root);
    while(!que.empty())
    {
        TreeNode* temp=que.front();
        que.pop();
            string a=solve(temp);
            //cout<<a<<"\n";
             mp[a]++;
            if(mp[a]==2)
            vec.push_back(temp);
        if(temp->right!=NULL)
        que.push(temp->right);
        if(temp->left!=NULL)
        que.push(temp->left);
    }
        return vec;
        
    }
        
    string solve(TreeNode *root)   
{
    if(!root)
    {
      return "&";
    }
    string s="-";
    s=s+to_string(root->val);
    s=s+solve(root->left);
    s=s+solve(root->right);
    return s;
}
};