class MyQueue {
public:
    /** Initialize your data structure here. */
    stack<int> s1;
    stack<int> s2;
    
    MyQueue() 
    {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) 
    {
        s1.push(x);
        
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() 
    {
        int y=-1;
        if(s1.empty())
        {
            return -1;
        }
        cout<<s1.size();
        while(!s1.empty())
        {
            if(s1.size()==1)
            {
                y=s1.top();
                s1.pop();
                break;
            }
            s2.push(s1.top());
            s1.pop();
        }
        
        while(!s2.empty())
        {
            s1.push(s2.top());
            s2.pop();
        }    
        return y;
    }
    
    /** Get the front element. */
    int peek() 
    {
        stack<int> temp=s1;
        
        if(temp.empty())
            return -1;
        while(!temp.empty())
        {
            if(temp.size()==1)
            {
                break;
            }
            temp.pop();
        }
        return temp.top();
    }
    
    /** Returns whether the queue is empty. */
    bool empty() 
    {
       if(!s1.empty())
       {
         return false;
       }
        return true;
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */