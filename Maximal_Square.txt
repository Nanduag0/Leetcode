class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) 
    {
        int   dp[matrix.size()][matrix[0].size()];
        memset(dp,0,sizeof(dp));
        bool flag=false;
        for(int i=0;i<matrix[0].size();i++)
        {
            if(matrix[matrix.size()-1][i]=='1')
                flag=true;
            dp[matrix.size()-1][i]=matrix[matrix.size()-1][i]-'0';
        }
        for(int i=0;i<matrix.size();i++)
        {
             if(matrix[i][matrix[0].size()-1]=='1')
                flag=true;
            dp[i][matrix[0].size()-1]=matrix[i][matrix[0].size()-1]-'0';
        }
        int ans=0;
        for(int i=matrix.size()-2;i>=0;i--)
        {
            for(int j=matrix[0].size()-2;j>=0;j--)
            {
                if(matrix[i][j]=='1')
                {
                dp[i][j]=min({dp[i+1][j+1],dp[i+1][j],dp[i][j+1]})+1;
                cout<<dp[i][j]<<" ";
                ans=max(dp[i][j],ans);  
                }  
            }
        }
        if(ans==0 && flag==true)
            return 1;
        
        return ans*ans;
        
    }
};