class Solution {
public:
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) 
    {
      int n=startTime.size();
      vector<vector<int>> vec(n);
      for(int i=0;i<n;i++)
      {
          vec[i]={startTime[i],endTime[i],profit[i]};
      }
        sort(vec.begin(),vec.end(),cmp);
        int dp[n],mid;
        dp[0]=vec[0][2];
        for(int i=1;i<startTime.size();i++)
        {
            int incl=vec[i][2];
            int low=0;
            int high=i-1;
            int last=-1;
            while(low<=high)
            {
                mid=(low+high)/2;
                if(vec[mid][1]<=vec[i][0])
                {
                    last=mid;
                    low=mid+1;
                }
                else
                    high=mid-1;
            }
            if(last!=-1)
                incl+=dp[last];
            int excl=dp[i-1];
            dp[i]=max(incl,excl);
        }
        return dp[n-1];
        
    }
   static  bool cmp(vector<int> a,vector<int> b)
    {
        return (a[1]<b[1]);
    }
};