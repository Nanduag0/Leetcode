Prim's Algorithm:

1) Have three array key, mst, and parent 
2) Take node 0 mst as visited 
3) See the adjacent nodes and iterate through it and mark them as visited
4) Mark the key and the parent 
5) Iterate through the array and find the node with the minimal key value and repeat
  step 3.
6) You will have your mst in parent array.

Disjoint Set and Path compression 

parent[100000]
rank[100000]
main()
{
  for(int i=0;i<=n;i++)
   {
     parent[i]=i;
     rank[i]=0;
    }
  }
  int findPar(int node)
{
   if(node==parent[node])
     return node;
   return parentnode=findPar(parent[node]);
}
void union()
{
  u=findPar(u);
  v=findPar(v);
  if(rank[u]<rank[v])
   {
     parent[u]=v;
   }
   else if(rank[v]<rank[u])
   {
    parent[v]=u;
   }
   else
   {
    parent[v]=u;
    rank[u]++;
    }
}
    
Krushkals Algorithm

Steps

1)Sort All the edges according to the weight 
2)iterate over the edges and see if the egdes are not a part of the same component 
  means that there is no cycle then add the cost and push the edges to the mst vector.
3)At the end make sure to find union of the edges.


