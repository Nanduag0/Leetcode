/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode* root) 
    {
        vector<int> vec;
        preorder(root,vec);
        int i=0;
        TreeNode* ptr=root;
        if(ptr!=NULL)
        {
          while(ptr->right!=NULL)
        {
            ptr->val=vec[i];
            i++;
            ptr->left=NULL;
            ptr=ptr->right;
        }
        ptr->val=vec[i];
        ptr->left=NULL;
        i++;
        while(i<vec.size())
        {
            TreeNode* temp=new TreeNode(vec[i]);
            temp->left=NULL;
            ptr->right=temp;
            ptr=ptr->right;
            i++;
        }
        ptr->right=NULL;
        }
      
        
    }
    void preorder(TreeNode* root,vector<int> &vec)
    {
        if(root==NULL)
            return ;
        vec.push_back(root->val);
        preorder(root->left,vec);
        preorder(root->right,vec);
        return;
    }
};