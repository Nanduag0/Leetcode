class Solution {
public:
    int nthSuperUglyNumber(int n, vector<int>& primes)
    {
        vector<int> dp(n,0);
        dp[0]=1;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        vector<int> count(primes.size(),0);
        for(int m=1;m<n;m++)
        {
             for(int i=0;i<primes.size();i++)
        {
            pq.push(make_pair(primes[i]*dp[count[i]],i));
        }
            pair<int,int> p=pq.top();
            int x=p.first;
            int y=p.second;
            dp[m]=x;
            cout<<dp[m]<<" ";
            for(int j=0;j<primes.size();j++)
            {
                if(primes[j]*dp[count[j]]==x)
                    count[j]++;
            }
            //count[y]++;
            while(!pq.empty())
                pq.pop();
        }
        return dp[n-1];
    }
};