/*
// Definition for a Node.i
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) 
    {
     if(node==NULL)
         return node;
        
      vector<Node*> visited(10000,NULL);
      Node* copy =new Node(node->val);
      dfs(node,copy,visited);
      return copy;
    }
    void dfs(Node* node,Node* copy,vector<Node*> &visited)
    {
        visited[copy->val]=copy;
        for(auto it : node->neighbors)
        {
            if(visited[it->val]==NULL)
            {
                Node* newnode=new Node(it->val);
                (copy->neighbors).push_back(newnode);
                dfs(it,newnode,visited);
            }
            else
            {
                (copy->neighbors).push_back(visited[it->val]);
            }
        }
    }
};