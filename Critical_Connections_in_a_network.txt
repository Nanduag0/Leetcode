class Solution {
public:
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
    vector<int> lower(n,0);
    vector<int> tinsertion(n,0);
    vector<int> adj[n];
    for(int i=0;i<connections.size();i++)
    {
        adj[connections[i][0]].push_back(connections[i][1]);
        adj[connections[i][1]].push_back(connections[i][0]);
    }
        vector<vector<int>> ans;
        vector<bool> visited(n,false);
        int timer=0;
        for(int i=0;i<n;i++)
        {
            if(!visited[i])
            {
                dfs(ans,visited,i,-1,adj,lower,tinsertion,timer);
            }
        }
        return ans;
    }
    void dfs(vector<vector<int>> &ans,vector<bool> &visited,int node,int parent,vector<int> adj[],vector<int> &lower,vector<int> &tinsertion,int &timer)
    {
        visited[node]=true;
        tinsertion[node]=lower[node]=timer++;
        for(auto it : adj[node])
        {
             if(it==parent)
                    continue;
            if(!visited[it])
            {
                dfs(ans,visited,it,node,adj,lower,tinsertion,timer);
                lower[node]=min(lower[node],lower[it]);
                if(lower[it]>tinsertion[node])
                {
                    ans.push_back({it,node});
                }
            }
            else
                lower[node]=min(lower[node],tinsertion[it]);
        }
        
    }
};