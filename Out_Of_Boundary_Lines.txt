class Solution {
public:
    int dp[51][51][52];
    int findPaths(int m, int n, int maxMove, int startRow, int startColumn)
    {
        memset(dp,-1,sizeof(dp));
        int count=0,sum=0;
        return solve(maxMove,startRow,startColumn,m,n);
        
    }
   int  solve(int maxMove,int startRow,int startColumn,int m,int n)
    {
        if ((startRow< 0 || startRow == m || startColumn < 0 || startColumn == n)) 
        {
            return 1;
        }
        else
            if (maxMove== 0)
            {
            return 0;
                
            }
       
        if(dp[startRow][startColumn][maxMove]!=-1)
            return dp[startRow][startColumn][maxMove];
       
        int ans=0;
        ans= (ans+solve(maxMove-1,startRow+1,startColumn,m,n))%1000000007;
        ans=(ans+solve(maxMove-1,startRow-1,startColumn,m,n))%1000000007;
        ans=(ans+solve(maxMove-1,startRow,startColumn+1,m,n))%1000000007;
        ans=(ans+solve(maxMove-1,startRow,startColumn-1,m,n))%1000000007;
        return dp[startRow][startColumn][maxMove]=ans;
       
    }
};